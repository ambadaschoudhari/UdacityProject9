// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var VerifierContract = artifacts.require('Verifier');

// - use the contents from proof.json generated from zokrates steps
//import proofJSON from '../../zokrates/code/square/proof';
var proofJSON = require('../../zokrates/code/square/proof');
var badProofJSON = require('../../zokrates/code/square/proof1');
    

contract('VerifyProof', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];
    const account_three = accounts[2];    
    var tokenName = "RealEstate";
    var tokenSymbol = "RRC";
    var baseTokenURI = "https://s3-us-west-2.amazonaws.com/udacity-blockchain/capstone/1";
    var tokenID = 1;

    describe('Verify Zokrates', function () {
        beforeEach(async function () {
             this.contract = await VerifierContract.new({from: account_one});
             console.log("Contract Deployed: ");
               })
        // Test verification with correct proof
        it('verification with correct proof', async function () { 
            //console.log("Test Started: a ", JSON.stringify(proofJSON.proof.a));
            // console.log("Test Started: b ", JSON.stringify(proofJSON.proof.b));
            //console.log("Test Started: c ", JSON.stringify(proofJSON.proof.c));
            //console.log("Test Started: input ", JSON.stringify(proofJSON.inputs));
            let verifyResult = await this.contract.verifyTx.call(proofJSON.proof.a,proofJSON.proof.b,proofJSON.proof.c,proofJSON.inputs);
            //console.log("Result: ",verifyResult);
            assert.equal(verifyResult, true, "TC1: Proof shall be verified");
        })
        // Test verification with incorrect proof        
        it('verification with correct proof', async function () { 
            let verifyResult = await this.contract.verifyTx.call(badProofJSON.proof.a,badProofJSON.proof.b,badProofJSON.proof.c,badProofJSON.inputs);
            assert.equal(verifyResult, false, "TC2: Invalid Proof shall not be verified");
        })

        
    });

    
})